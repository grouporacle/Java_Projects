package core;

import java.util.ArrayList;

/**
 * Represents an individual copy of a book
 */

public class Book {
    //instance variables for Book object
    private String author;
    private String title;
    private int id;
    private int pages;
    //static variable to track number of books with unknown author
    private static int unknownAuthors =0;

    /**
        Utility static method: capitalize
        accepts a String and then returns in capitalized form(first uppercase - rest lowecase)
        if argument is empty, it returns an empty String ""
        capitalize("jAVa") => "Java"
        capitalize("HTML") => "Html"
        capitalize("") => ""
        This method will be used in setAuthor(), setTitle() methods
     */
    public static String capitalize(String word) {
		String cap = "";
    	cap=word.substring(0,1).toUpperCase()+word.substring(1,word.length()).toLowerCase();
    	return cap;
    }

    /**
      Utility static method: isTitleWord
      -This method will be used in setTitle() method
      -Accepts a words to check if it is a part of the title or just an article etc.
      - The method returns false => if word parameter is one of articles, coordinate conjunctions, or prepositions. See full list below
      -else method returns true
      Articles:
     "a" , "an", "the"
      Coordinate conjunctions:
     "and", "but", "for", "nor", "or", "so", "yet"
     Most common single-word English prepositions:
     "at", "by", "in", "into", "near", "of", "on", "to", "than", "via"

     isTitleWord("Apple") => true
     isTitleWord("a") => false
     isTitleWord("BUT") => false
     isTitleWord("THE") => false
     isTitleWord("neaR") => false
     isTitleWord("java") => true

     */
    public static boolean isTitleWord(String word) {
		String[] list = {"a" , "an", "the", "and", "but", "for", "nor", "or", "so", "yet","at", "by", "in", "into", "near", "of", "on", "to", "than", "via"};
    	for(int i=0;i<list.length;i++) {
    		if(word.toLowerCase().equals(list[i].toLowerCase()))return false;
    	}
    	return true;
        
    }

    /**
     * No args constructor. Stays empty
     */
    public Book() {
    }
    
    /**
     * 4 args constructor. accepts id, author, title, pages
     * CALLS SETTER methods to assign to instance variables.
     * ex: setId(id);
     * It does NOT directly assign to the instance variable
     * ex: NO => this.id = id;
     */
    public Book(int id, String author, String title, int pages ) {
       
    	setId(id);
    	setAuthor(author);
    	setTitle(title);
    	setPages(pages);
       
    }

    /**
     * setAuthor method will be used to set value to private author of the Book
     * @param author : String
     * Conditions:
     *    => if parameter author is value is empty, 1) "Unknown" is assigned to instance variable author
     *                                             2) static unknownAuthors is incremented by one.
     *    => Each word in Book author's name should be capitalized. CALL capitalize method
     *  Example:
     *  Book b = new Book();
     *  b.setAuthor("mArufJon temirov"); => assigns "Marufjon Temirov" to this.author
     *  b.setAuthor("ironMAN"); => assigns "Ironman" to this.author
     *  b.setAuthor("") => assigns "Unknown" to this.author and unknownAuthors++
     */
    public void setAuthor(String author) {
        if(author =="") {
        	this.author="Unknown";
        	unknownAuthors++;
        }
        if(author !=""&&author.split(" ").length>1) {
        	this.author = author.split(" ")[0].substring(0, 1).toUpperCase()+author.split(" ")[0].substring(1, author.split(" ")[0].length()).toLowerCase()+" "+
        			author.split(" ")[1].substring(0, 1).toUpperCase()+author.split(" ")[1].substring(1, author.split(" ")[1].length()).toLowerCase();
        } if(author !=""&&author.split(" ").length <2) {
        	this.author = author.substring(0, 1).toUpperCase()+author.substring(1,author.length()).toLowerCase();
        }
        
        
    }

    /**
     * setTitle method will be used to set value to private title of the Book
     * @param title : string
     * Conditions:
     *   => if title is single word, capitalize it and assign to this.title.
     *   => if title is empty, assign "" to this.title (<- we will handle this in Shelf class properly)
     *   => You need to capitalize each word of title except articles, coordinate conjunctions, or prepositions.
     *              See full list in isTitleWord method, they need to be all lowercase.
     *              -> Call isTitleWord() method to check if a word needs to be capitalized or not.
     *              -> Call capitalize method to capitalize title words.
     *   => First word is always capitalized regardless if it is article etc.
     *   Ex:
     *      Book book = new Book();
     *      book.setTitle("MaruF The cool"); => "Maruf the Cool" is assigned to this.title
     *
     *      book.setTitle("the Chronicles OF TrumP"); => "The Chronicles of Trump" is assigned to this.title
     *
     *
     */
    public void setTitle(String title) {
    	String[] list = {"a" , "an", "the", "and", "but", "for", "nor", "or", "so", "yet","at", "by", "in", "into", "near", "of", "on", "to", "than", "via"};  
    //first solution----------------------------------------------------------------
    //	ArrayList words = new ArrayList();
    //	int checker=0;
    //	this.title="";
    //	if(title.split(" ").length>1&&title!="") {
    //	for(int i=0;i<title.split(" ").length;i++) {
    //		checker=0;
    //		for(int j=0;j<list.length;j++) {
    //			if(title.split(" ")[i].toLowerCase().equals(list[j].toLowerCase())&&i!=0)
    //				checker++;
    //		}
    //		if(checker==0) {
   // 			words.add(capitalize(title.split(" ")[i]));
    //		}else if(checker!=0) {
   // 			words.add(title.split(" ")[i].toLowerCase());
    //		}
    //	}
    //    for(int i=0;i<words.size();i++) {
    //    	this.title = this.title+" "+words.get(i);
    //    	this.title=this.title.trim();
    //    }
   //     }else if(title=="") {
    //    	this.title="";
    //    }else if(title.split(" ").length<2&&title!="") {
   //     	this.title = capitalize(title);
    //    }
    	//secon solution-------------------------------------------------------------------------------
    	//int checker=0;
    	//	this.title="";
    	//	if(title.split(" ").length>1&&title!="") {
    	//	    	for(int i=0;i<title.split(" ").length;i++) {
    	//	    		checker=0;
    	//	    		for(int j=0;j<list.length;j++) {
    	//	    			if(title.split(" ")[i].toLowerCase().equals(list[j].toLowerCase())&&i!=0)
    	//	    				checker++;
    	//	    		}//capitalize
    	//	    		if(checker==0) {
    	//	   			this.title=this.title+" "+capitalize(title.split(" ")[i]);
    	//	    		}else if(checker!=0) {
    	//	   			this.title=this.title+" "+title.split(" ")[i].toLowerCase();
    	//	    		}
    	//	    	}
    		      
    	//	        this.title=this.title.trim();
    	
    	//	}
    	//third solution-------Saya Approach------------------------------------
    		this.title="";
    		if(title.split(" ").length>1&&title!="") {
    		    	for(int i=0;i<title.split(" ").length;i++) {
    		    		
    		    		
    		    			if(i==0) {
    		    				this.title=this.title+" "+capitalize(title.split(" ")[i]);
    		    		}else if(i!=0&&isTitleWord(title.split(" ")[i])) {
    		    			this.title=this.title+" "+capitalize(title.split(" ")[i]);
    		    			
    		    		}else if(i!=0&&!isTitleWord(title.split(" ")[i])) {
        		   			this.title=this.title+" "+title.split(" ")[i].toLowerCase();
    		    		
    		    		}
    	    	}
    		      
    		        this.title=this.title.trim();
    	
    		}
    	
    	
    }

    /**
     * toString instance method, String representation of the Book object
     * @return String
     * Format includes author, title, id, pages of the Book object:
     * Book[author=Marufjon T, title=Selenium Cookbook, id=10, pages=300]
     */
    public String toString() {
       
       return "author="+this.getAuthor()+","+" title="+this.getTitle()+","+" id="+this.getId()+","+" pages="+this.getPages();
       
    }


    /**
     * Getter methods for static unknownAuthors
     * @returns unknownAuthors value
     */
    public static int getUnknownAuthors(){
       
       
       return unknownAuthors;
    }

    /**
     * Getter methods for private pages
     * @returns pages value
     */
    public int getPages() {
       
       
       return pages;
    }

    /**
     * Setter method for private pages. No conditions
     * @param pages
     */
    public void setPages(int pages) {
      
      this.pages=pages;
      
    }

    /**
     * public Getter method for private author
     */
    public String getAuthor() {
      
      return author;
    }


    /**
     * public Getter method for private title
     */
    public String getTitle() {
       
       
       return title;
    }


    /**
     * public Getter method for private id
     */
    public int getId() {
      
      
      return id;
    }
    /**
     * public setter method for private id
     */
    public void setId(int id) {
       this.id=id;
       
       
    }


}
